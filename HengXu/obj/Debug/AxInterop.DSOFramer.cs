//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("1.2.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("2005-1-12 18:06:54")]

namespace AxDSOFramer {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{00460182-9e5e-11d5-b7c8-b8269041dd57}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("OnFileCommand")]
    public class AxFramerControl : System.Windows.Forms.AxHost {
        
        private DSOFramer._FramerControl ocx;
        
        private AxFramerControlEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxFramerControl() : 
                base("00460182-9e5e-11d5-b7c8-b8269041dd57") {
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65538)]
        public virtual object ActiveDocument {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ActiveDocument", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ActiveDocument;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65546)]
        public virtual string Caption {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Caption", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Caption;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Caption", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Caption = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65547)]
        public virtual bool Titlebar {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Titlebar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Titlebar;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Titlebar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Titlebar = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65548)]
        public virtual bool Toolbars {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Toolbars", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Toolbars;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Toolbars", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Toolbars = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65549)]
        public virtual bool ModalState {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ModalState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ModalState;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ModalState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ModalState = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-504)]
        public virtual DSOFramer.dsoBorderStyle BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-503)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color BorderColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.BorderColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color BackColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
                }
                else {
                    return base.BackColor;
                }
            }
            set {
                base.BackColor = value;
                if ((this.ocx != null)) {
                    this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-513)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color ForeColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.ForeColor)));
                }
                else {
                    return base.ForeColor;
                }
            }
            set {
                base.ForeColor = value;
                if ((this.ocx != null)) {
                    this.ocx.ForeColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65552)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color TitlebarColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitlebarColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.TitlebarColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitlebarColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TitlebarColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65553)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color TitlebarTextColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitlebarTextColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.TitlebarTextColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitlebarTextColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TitlebarTextColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65555)]
        public virtual bool Menubar {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Menubar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Menubar;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Menubar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Menubar = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65556)]
        public virtual string HostName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HostName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HostName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HostName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HostName = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65557)]
        public virtual string DocumentFullName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DocumentFullName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DocumentFullName;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65561)]
        public virtual bool IsReadOnly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsReadOnly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsReadOnly;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65562)]
        public virtual bool IsDirty {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsDirty", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsDirty;
            }
        }
        
        public event _DFramerCtlEvents_OnFileCommandEventHandler OnFileCommand;
        
        public event _DFramerCtlEvents_OnDocumentOpenedEventHandler OnDocumentOpened;
        
        public event System.EventHandler OnDocumentClosed;
        
        public event _DFramerCtlEvents_OnActivationChangeEventHandler OnActivationChange;
        
        public event _DFramerCtlEvents_BeforeDocumentClosedEventHandler BeforeDocumentClosed;
        
        public event _DFramerCtlEvents_BeforeDocumentSavedEventHandler BeforeDocumentSaved;
        
        public event System.EventHandler OnPrintPreviewExit;
        
        public virtual void Activate() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Activate", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Activate();
        }
        
        public virtual void CreateNew(string progIdOrTemplate) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CreateNew", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CreateNew(progIdOrTemplate);
        }
        
        public virtual void Open(object document) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Open", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    document,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(DSOFramer._FramerControl);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("Open");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void Open(object document, object readOnly, object progId, object webUsername, object webPassword) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Open", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Open(document, readOnly, progId, webUsername, webPassword);
        }
        
        public virtual void Save() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Save", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(DSOFramer._FramerControl);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("Save");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void Save(object saveAsDocument, object overwriteExisting, object webUsername, object webPassword) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Save", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Save(saveAsDocument, overwriteExisting, webUsername, webPassword);
        }
        
        public virtual void _PrintOutOld() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_PrintOutOld", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(DSOFramer._FramerControl);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("_PrintOutOld");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void _PrintOutOld(object promptToSelectPrinter) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_PrintOutOld", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx._PrintOutOld(promptToSelectPrinter);
        }
        
        public virtual void Close() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Close", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Close();
        }
        
        public virtual void ShowDialog(DSOFramer.dsoShowDialogType dlgType) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowDialog", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ShowDialog(dlgType);
        }
        
        public virtual void set_EnableFileCommand(DSOFramer.dsoFileCommandType item, bool pbool) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_EnableFileCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_EnableFileCommand(item, pbool);
        }
        
        public virtual bool get_EnableFileCommand(DSOFramer.dsoFileCommandType item) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_EnableFileCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_EnableFileCommand(item)));
            return returnValue;
        }
        
        public virtual void ExecOleCommand(int oLECMDID) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExecOleCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    oLECMDID,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(DSOFramer._FramerControl);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("ExecOleCommand");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void ExecOleCommand(int oLECMDID, object options, ref object vInParam, ref object vInOutParam) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExecOleCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ExecOleCommand(oLECMDID, options, ref vInParam, ref vInOutParam);
        }
        
        public virtual void PrintOut() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PrintOut", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(DSOFramer._FramerControl);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("PrintOut");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void PrintOut(object promptUser, object printerName, object copies, object fromPage, object toPage, object outputFile) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PrintOut", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PrintOut(promptUser, printerName, copies, fromPage, toPage, outputFile);
        }
        
        public virtual void PrintPreview() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PrintPreview", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PrintPreview();
        }
        
        public virtual void PrintPreviewExit() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PrintPreviewExit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PrintPreviewExit();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxFramerControlEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(DSOFramer._DFramerCtlEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((DSOFramer._FramerControl)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOnFileCommand(object sender, _DFramerCtlEvents_OnFileCommandEvent e) {
            if ((this.OnFileCommand != null)) {
                this.OnFileCommand(sender, e);
            }
        }
        
        internal void RaiseOnOnDocumentOpened(object sender, _DFramerCtlEvents_OnDocumentOpenedEvent e) {
            if ((this.OnDocumentOpened != null)) {
                this.OnDocumentOpened(sender, e);
            }
        }
        
        internal void RaiseOnOnDocumentClosed(object sender, System.EventArgs e) {
            if ((this.OnDocumentClosed != null)) {
                this.OnDocumentClosed(sender, e);
            }
        }
        
        internal void RaiseOnOnActivationChange(object sender, _DFramerCtlEvents_OnActivationChangeEvent e) {
            if ((this.OnActivationChange != null)) {
                this.OnActivationChange(sender, e);
            }
        }
        
        internal void RaiseOnBeforeDocumentClosed(object sender, _DFramerCtlEvents_BeforeDocumentClosedEvent e) {
            if ((this.BeforeDocumentClosed != null)) {
                this.BeforeDocumentClosed(sender, e);
            }
        }
        
        internal void RaiseOnBeforeDocumentSaved(object sender, _DFramerCtlEvents_BeforeDocumentSavedEvent e) {
            if ((this.BeforeDocumentSaved != null)) {
                this.BeforeDocumentSaved(sender, e);
            }
        }
        
        internal void RaiseOnOnPrintPreviewExit(object sender, System.EventArgs e) {
            if ((this.OnPrintPreviewExit != null)) {
                this.OnPrintPreviewExit(sender, e);
            }
        }
    }
    
    public delegate void _DFramerCtlEvents_OnFileCommandEventHandler(object sender, _DFramerCtlEvents_OnFileCommandEvent e);
    
    public class _DFramerCtlEvents_OnFileCommandEvent {
        
        public DSOFramer.dsoFileCommandType item;
        
        public bool cancel;
        
        public _DFramerCtlEvents_OnFileCommandEvent(DSOFramer.dsoFileCommandType item, bool cancel) {
            this.item = item;
            this.cancel = cancel;
        }
    }
    
    public delegate void _DFramerCtlEvents_OnDocumentOpenedEventHandler(object sender, _DFramerCtlEvents_OnDocumentOpenedEvent e);
    
    public class _DFramerCtlEvents_OnDocumentOpenedEvent {
        
        public string file;
        
        public object document;
        
        public _DFramerCtlEvents_OnDocumentOpenedEvent(string file, object document) {
            this.file = file;
            this.document = document;
        }
    }
    
    public delegate void _DFramerCtlEvents_OnActivationChangeEventHandler(object sender, _DFramerCtlEvents_OnActivationChangeEvent e);
    
    public class _DFramerCtlEvents_OnActivationChangeEvent {
        
        public bool fGoingActive;
        
        public _DFramerCtlEvents_OnActivationChangeEvent(bool fGoingActive) {
            this.fGoingActive = fGoingActive;
        }
    }
    
    public delegate void _DFramerCtlEvents_BeforeDocumentClosedEventHandler(object sender, _DFramerCtlEvents_BeforeDocumentClosedEvent e);
    
    public class _DFramerCtlEvents_BeforeDocumentClosedEvent {
        
        public object document;
        
        public bool cancel;
        
        public _DFramerCtlEvents_BeforeDocumentClosedEvent(object document, bool cancel) {
            this.document = document;
            this.cancel = cancel;
        }
    }
    
    public delegate void _DFramerCtlEvents_BeforeDocumentSavedEventHandler(object sender, _DFramerCtlEvents_BeforeDocumentSavedEvent e);
    
    public class _DFramerCtlEvents_BeforeDocumentSavedEvent {
        
        public object document;
        
        public string location;
        
        public bool cancel;
        
        public _DFramerCtlEvents_BeforeDocumentSavedEvent(object document, string location, bool cancel) {
            this.document = document;
            this.location = location;
            this.cancel = cancel;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxFramerControlEventMulticaster : DSOFramer._DFramerCtlEvents {
        
        private AxFramerControl parent;
        
        public AxFramerControlEventMulticaster(AxFramerControl parent) {
            this.parent = parent;
        }
        
        public virtual void OnFileCommand(DSOFramer.dsoFileCommandType item, ref bool cancel) {
            _DFramerCtlEvents_OnFileCommandEvent onfilecommandEvent = new _DFramerCtlEvents_OnFileCommandEvent(item, cancel);
            this.parent.RaiseOnOnFileCommand(this.parent, onfilecommandEvent);
            cancel = onfilecommandEvent.cancel;
        }
        
        public virtual void OnDocumentOpened(string file, object document) {
            _DFramerCtlEvents_OnDocumentOpenedEvent ondocumentopenedEvent = new _DFramerCtlEvents_OnDocumentOpenedEvent(file, document);
            this.parent.RaiseOnOnDocumentOpened(this.parent, ondocumentopenedEvent);
        }
        
        public virtual void OnDocumentClosed() {
            System.EventArgs ondocumentclosedEvent = new System.EventArgs();
            this.parent.RaiseOnOnDocumentClosed(this.parent, ondocumentclosedEvent);
        }
        
        public virtual void OnActivationChange(bool fGoingActive) {
            _DFramerCtlEvents_OnActivationChangeEvent onactivationchangeEvent = new _DFramerCtlEvents_OnActivationChangeEvent(fGoingActive);
            this.parent.RaiseOnOnActivationChange(this.parent, onactivationchangeEvent);
        }
        
        public virtual void BeforeDocumentClosed(object document, ref bool cancel) {
            _DFramerCtlEvents_BeforeDocumentClosedEvent beforedocumentclosedEvent = new _DFramerCtlEvents_BeforeDocumentClosedEvent(document, cancel);
            this.parent.RaiseOnBeforeDocumentClosed(this.parent, beforedocumentclosedEvent);
            cancel = beforedocumentclosedEvent.cancel;
        }
        
        public virtual void BeforeDocumentSaved(object document, string location, ref bool cancel) {
            _DFramerCtlEvents_BeforeDocumentSavedEvent beforedocumentsavedEvent = new _DFramerCtlEvents_BeforeDocumentSavedEvent(document, location, cancel);
            this.parent.RaiseOnBeforeDocumentSaved(this.parent, beforedocumentsavedEvent);
            cancel = beforedocumentsavedEvent.cancel;
        }
        
        public virtual void OnPrintPreviewExit() {
            System.EventArgs onprintpreviewexitEvent = new System.EventArgs();
            this.parent.RaiseOnOnPrintPreviewExit(this.parent, onprintpreviewexitEvent);
        }
    }
}
