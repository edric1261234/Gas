//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("1.6.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("2006-4-7 18:22:02")]

namespace AxCWUIControlsLib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{d940e4be-6079-11ce-88cb-0020af6845f6}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ValueChanged")]
    [System.ComponentModel.DefaultProperty("_Value")]
    public class AxCWButton : System.Windows.Forms.AxHost {
        
        private CWUIControlsLib._DCWButton ocx;
        
        private AxCWButtonEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxCWButton() : 
                base("d940e4be-6079-11ce-88cb-0020af6845f6") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("CWUIControlsLib.IFontDisp")]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((CWUIControlsLib.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color BackColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
                }
                else {
                    return base.BackColor;
                }
            }
            set {
                base.BackColor = value;
                if ((this.ocx != null)) {
                    this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual CWUIControlsLib.CWButtonModes Mode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Mode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Mode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Mode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Mode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-518)]
        public virtual string Caption {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Caption", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Caption;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Caption", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Caption = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Value;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Value = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(0)]
        public virtual bool _Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx._Value;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx._Value = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual string OnText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OnText;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OnText = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual string OffText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OffText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OffText;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OffText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OffText = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color OnColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.OnColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OnColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color OffColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OffColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.OffColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OffColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OffColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color OnTextColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnTextColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.OnTextColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnTextColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OnTextColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color OffTextColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OffTextColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.OffTextColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OffTextColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OffTextColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color CaptionColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CaptionColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.CaptionColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CaptionColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CaptionColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual CWUIControlsLib.CWPictureDisp OnImage {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OnImage;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OnImage = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual CWUIControlsLib.CWPictureDisp OffImage {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OffImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OffImage;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OffImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OffImage = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool ImmediateUpdates {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImmediateUpdates", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImmediateUpdates;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImmediateUpdates", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImmediateUpdates = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual CWUIControlsLib.CWShowFocusModes ShowFocusMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowFocusMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowFocusMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowFocusMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowFocusMode = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual CWUIControlsLib.CWPictureDisp CtlBackgroundImage {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackgroundImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BackgroundImage;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackgroundImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackgroundImage = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool Windowless {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Windowless", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Windowless;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Windowless", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Windowless = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-525)]
        public virtual int ReadyState {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadyState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ReadyState;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadyState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ReadyState = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual CWUIControlsLib.CWKeyboardModes KeyboardMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("KeyboardMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.KeyboardMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("KeyboardMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.KeyboardMode = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(277)]
        public virtual CWUIControlsLib.CWBindings CWBindings {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CWBindings", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CWBindings;
            }
        }
        
        public event _DCWButtonEvents_ValueChangedEventHandler ValueChanged;
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DblClick;
        
        public event _DCWButtonEvents_KeyDownEventHandler KeyDownEvent;
        
        public event _DCWButtonEvents_KeyUpEventHandler KeyUpEvent;
        
        public event _DCWButtonEvents_KeyPressEventHandler KeyPressEvent;
        
        public event _DCWButtonEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event _DCWButtonEvents_MouseUpEventHandler MouseUpEvent;
        
        public event _DCWButtonEvents_MouseDownEventHandler MouseDownEvent;
        
        public event System.EventHandler ReadyStateChange;
        
        public event _DCWButtonEvents_CWBindingDataUpdatedEventHandler CWBindingDataUpdated;
        
        public event _DCWButtonEvents_CWBindingStatusUpdatedEventHandler CWBindingStatusUpdated;
        
        public virtual void SetBuiltinStyle(CWUIControlsLib.CWButtonStyles style) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetBuiltinStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetBuiltinStyle(style);
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void ImportStyle(string fileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImportStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ImportStyle(fileName);
        }
        
        public virtual void ExportStyle(string fileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExportStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ExportStyle(fileName);
        }
        
        public virtual CWUIControlsLib.CWImage OnImages(object item) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnImages", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.CWImage returnValue = ((CWUIControlsLib.CWImage)(this.ocx.OnImages(item)));
            return returnValue;
        }
        
        public virtual CWUIControlsLib.CWImage OffImages(object item) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OffImages", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.CWImage returnValue = ((CWUIControlsLib.CWImage)(this.ocx.OffImages(item)));
            return returnValue;
        }
        
        public virtual System.Drawing.Image ControlImage() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.IPictureDisp returnValue = ((CWUIControlsLib.IPictureDisp)(this.ocx.ControlImage()));
            return GetPictureFromIPicture(returnValue);
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual System.Drawing.Image ControlImageEx(int dpiX, int dpiY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlImageEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.IPictureDisp returnValue = ((CWUIControlsLib.IPictureDisp)(this.ocx.ControlImageEx(dpiX, dpiY)));
            return GetPictureFromIPicture(returnValue);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxCWButtonEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(CWUIControlsLib._DCWButtonEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((CWUIControlsLib._DCWButton)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnValueChanged(object sender, _DCWButtonEvents_ValueChangedEvent e) {
            if ((this.ValueChanged != null)) {
                this.ValueChanged(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, _DCWButtonEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, _DCWButtonEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, _DCWButtonEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, _DCWButtonEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, _DCWButtonEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, _DCWButtonEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnReadyStateChange(object sender, System.EventArgs e) {
            if ((this.ReadyStateChange != null)) {
                this.ReadyStateChange(sender, e);
            }
        }
        
        internal void RaiseOnCWBindingDataUpdated(object sender, _DCWButtonEvents_CWBindingDataUpdatedEvent e) {
            if ((this.CWBindingDataUpdated != null)) {
                this.CWBindingDataUpdated(sender, e);
            }
        }
        
        internal void RaiseOnCWBindingStatusUpdated(object sender, _DCWButtonEvents_CWBindingStatusUpdatedEvent e) {
            if ((this.CWBindingStatusUpdated != null)) {
                this.CWBindingStatusUpdated(sender, e);
            }
        }
    }
    
    public delegate void _DCWButtonEvents_ValueChangedEventHandler(object sender, _DCWButtonEvents_ValueChangedEvent e);
    
    public class _DCWButtonEvents_ValueChangedEvent {
        
        public bool value;
        
        public _DCWButtonEvents_ValueChangedEvent(bool value) {
            this.value = value;
        }
    }
    
    public delegate void _DCWButtonEvents_KeyDownEventHandler(object sender, _DCWButtonEvents_KeyDownEvent e);
    
    public class _DCWButtonEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DCWButtonEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DCWButtonEvents_KeyUpEventHandler(object sender, _DCWButtonEvents_KeyUpEvent e);
    
    public class _DCWButtonEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DCWButtonEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DCWButtonEvents_KeyPressEventHandler(object sender, _DCWButtonEvents_KeyPressEvent e);
    
    public class _DCWButtonEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public _DCWButtonEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void _DCWButtonEvents_MouseMoveEventHandler(object sender, _DCWButtonEvents_MouseMoveEvent e);
    
    public class _DCWButtonEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWButtonEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWButtonEvents_MouseUpEventHandler(object sender, _DCWButtonEvents_MouseUpEvent e);
    
    public class _DCWButtonEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWButtonEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWButtonEvents_MouseDownEventHandler(object sender, _DCWButtonEvents_MouseDownEvent e);
    
    public class _DCWButtonEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWButtonEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWButtonEvents_CWBindingDataUpdatedEventHandler(object sender, _DCWButtonEvents_CWBindingDataUpdatedEvent e);
    
    public class _DCWButtonEvents_CWBindingDataUpdatedEvent {
        
        public short index;
        
        public CWUIControlsLib.CWData data;
        
        public bool ignore;
        
        public _DCWButtonEvents_CWBindingDataUpdatedEvent(short index, CWUIControlsLib.CWData data, bool ignore) {
            this.index = index;
            this.data = data;
            this.ignore = ignore;
        }
    }
    
    public delegate void _DCWButtonEvents_CWBindingStatusUpdatedEventHandler(object sender, _DCWButtonEvents_CWBindingStatusUpdatedEvent e);
    
    public class _DCWButtonEvents_CWBindingStatusUpdatedEvent {
        
        public short index;
        
        public int status;
        
        public int error;
        
        public string message;
        
        public _DCWButtonEvents_CWBindingStatusUpdatedEvent(short index, int status, int error, string message) {
            this.index = index;
            this.status = status;
            this.error = error;
            this.message = message;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxCWButtonEventMulticaster : CWUIControlsLib._DCWButtonEvents {
        
        private AxCWButton parent;
        
        public AxCWButtonEventMulticaster(AxCWButton parent) {
            this.parent = parent;
        }
        
        public virtual void ValueChanged(bool value) {
            _DCWButtonEvents_ValueChangedEvent valuechangedEvent = new _DCWButtonEvents_ValueChangedEvent(value);
            this.parent.RaiseOnValueChanged(this.parent, valuechangedEvent);
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            _DCWButtonEvents_KeyDownEvent keydownEvent = new _DCWButtonEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            _DCWButtonEvents_KeyUpEvent keyupEvent = new _DCWButtonEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            _DCWButtonEvents_KeyPressEvent keypressEvent = new _DCWButtonEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            _DCWButtonEvents_MouseMoveEvent mousemoveEvent = new _DCWButtonEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            _DCWButtonEvents_MouseUpEvent mouseupEvent = new _DCWButtonEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            _DCWButtonEvents_MouseDownEvent mousedownEvent = new _DCWButtonEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void ReadyStateChange() {
            System.EventArgs readystatechangeEvent = new System.EventArgs();
            this.parent.RaiseOnReadyStateChange(this.parent, readystatechangeEvent);
        }
        
        public virtual void CWBindingDataUpdated(short index, CWUIControlsLib.CWData data, ref bool ignore) {
            _DCWButtonEvents_CWBindingDataUpdatedEvent cwbindingdataupdatedEvent = new _DCWButtonEvents_CWBindingDataUpdatedEvent(index, data, ignore);
            this.parent.RaiseOnCWBindingDataUpdated(this.parent, cwbindingdataupdatedEvent);
            ignore = cwbindingdataupdatedEvent.ignore;
        }
        
        public virtual void CWBindingStatusUpdated(short index, int status, int error, string message) {
            _DCWButtonEvents_CWBindingStatusUpdatedEvent cwbindingstatusupdatedEvent = new _DCWButtonEvents_CWBindingStatusUpdatedEvent(index, status, error, message);
            this.parent.RaiseOnCWBindingStatusUpdated(this.parent, cwbindingstatusupdatedEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{d940e4c8-6079-11ce-88cb-0020af6845f6}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("PointerValueChanged")]
    [System.ComponentModel.DefaultProperty("_Value")]
    public class AxCWSlide : System.Windows.Forms.AxHost {
        
        private CWUIControlsLib._DCWSlide ocx;
        
        private AxCWSlideEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxCWSlide() : 
                base("d940e4c8-6079-11ce-88cb-0020af6845f6") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(0)]
        public virtual object _Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx._Value;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx._Value = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(261)]
        public virtual CWUIControlsLib.CWPointer ActivePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ActivePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ActivePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ActivePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ActivePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-518)]
        public virtual string Caption {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Caption", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Caption;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Caption", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Caption = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("CWUIControlsLib.IFontDisp")]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((CWUIControlsLib.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(263)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color CaptionColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CaptionColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.CaptionColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CaptionColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CaptionColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-525)]
        public virtual int ReadyState {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadyState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ReadyState;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadyState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ReadyState = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(259)]
        public virtual CWUIControlsLib.CWStatistics Statistics {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Statistics", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Statistics;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Statistics", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Statistics = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color BackColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
                }
                else {
                    return base.BackColor;
                }
            }
            set {
                base.BackColor = value;
                if ((this.ocx != null)) {
                    this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(262)]
        public virtual int ValuePairIndex {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ValuePairIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ValuePairIndex;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ValuePairIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ValuePairIndex = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(257)]
        public virtual object Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Value;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Value = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-513)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color ForeColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.ForeColor)));
                }
                else {
                    return base.ForeColor;
                }
            }
            set {
                base.ForeColor = value;
                if ((this.ocx != null)) {
                    this.ocx.ForeColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(266)]
        public virtual bool ImmediateUpdates {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImmediateUpdates", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImmediateUpdates;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImmediateUpdates", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImmediateUpdates = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(264)]
        public virtual CWUIControlsLib.CWShowFocusModes ShowFocusMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowFocusMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowFocusMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowFocusMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowFocusMode = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(268)]
        public virtual CWUIControlsLib.CWPictureDisp CtlBackgroundImage {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackgroundImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BackgroundImage;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackgroundImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackgroundImage = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(269)]
        public virtual bool Windowless {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Windowless", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Windowless;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Windowless", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Windowless = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(272)]
        public virtual object IncDecValue {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IncDecValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IncDecValue;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IncDecValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IncDecValue = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(273)]
        public virtual CWUIControlsLib.CWKeyboardModes KeyboardMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("KeyboardMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.KeyboardMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("KeyboardMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.KeyboardMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(288)]
        public virtual bool ValuePairsOnly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ValuePairsOnly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ValuePairsOnly;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ValuePairsOnly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ValuePairsOnly = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(276)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color InteriorColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("InteriorColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.InteriorColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("InteriorColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.InteriorColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(258)]
        public virtual CWUIControlsLib.CWAxis Axis {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Axis", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Axis;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(260)]
        public virtual CWUIControlsLib.CWPointers Pointers {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Pointers", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Pointers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(277)]
        public virtual CWUIControlsLib.CWBindings CWBindings {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CWBindings", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CWBindings;
            }
        }
        
        public event _DCWSlideEvents_PointerValueChangedEventHandler PointerValueChanged;
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DblClick;
        
        public event _DCWSlideEvents_KeyDownEventHandler KeyDownEvent;
        
        public event System.EventHandler ReadyStateChange;
        
        public event _DCWSlideEvents_KeyPressEventHandler KeyPressEvent;
        
        public event _DCWSlideEvents_KeyUpEventHandler KeyUpEvent;
        
        public event _DCWSlideEvents_MouseDownEventHandler MouseDownEvent;
        
        public event _DCWSlideEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event _DCWSlideEvents_MouseUpEventHandler MouseUpEvent;
        
        public event _DCWSlideEvents_PointerValueCommittedEventHandler PointerValueCommitted;
        
        public event _DCWSlideEvents_CWBindingDataUpdatedEventHandler CWBindingDataUpdated;
        
        public event _DCWSlideEvents_CWBindingStatusUpdatedEventHandler CWBindingStatusUpdated;
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void ImportStyle(string fileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImportStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ImportStyle(fileName);
        }
        
        public virtual void ExportStyle(string fileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExportStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ExportStyle(fileName);
        }
        
        public virtual CWUIControlsLib.CWImage Images(object item) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Images", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.CWImage returnValue = ((CWUIControlsLib.CWImage)(this.ocx.Images(item)));
            return returnValue;
        }
        
        public virtual System.Drawing.Image ControlImage() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.IPictureDisp returnValue = ((CWUIControlsLib.IPictureDisp)(this.ocx.ControlImage()));
            return GetPictureFromIPicture(returnValue);
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void SetBuiltinStyle(CWUIControlsLib.CWSlideStyles style) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetBuiltinStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetBuiltinStyle(style);
        }
        
        public virtual System.Drawing.Image ControlImageEx(int dpiX, int dpiY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlImageEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.IPictureDisp returnValue = ((CWUIControlsLib.IPictureDisp)(this.ocx.ControlImageEx(dpiX, dpiY)));
            return GetPictureFromIPicture(returnValue);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxCWSlideEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(CWUIControlsLib._DCWSlideEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((CWUIControlsLib._DCWSlide)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnPointerValueChanged(object sender, _DCWSlideEvents_PointerValueChangedEvent e) {
            if ((this.PointerValueChanged != null)) {
                this.PointerValueChanged(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, _DCWSlideEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnReadyStateChange(object sender, System.EventArgs e) {
            if ((this.ReadyStateChange != null)) {
                this.ReadyStateChange(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, _DCWSlideEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, _DCWSlideEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, _DCWSlideEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, _DCWSlideEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, _DCWSlideEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnPointerValueCommitted(object sender, _DCWSlideEvents_PointerValueCommittedEvent e) {
            if ((this.PointerValueCommitted != null)) {
                this.PointerValueCommitted(sender, e);
            }
        }
        
        internal void RaiseOnCWBindingDataUpdated(object sender, _DCWSlideEvents_CWBindingDataUpdatedEvent e) {
            if ((this.CWBindingDataUpdated != null)) {
                this.CWBindingDataUpdated(sender, e);
            }
        }
        
        internal void RaiseOnCWBindingStatusUpdated(object sender, _DCWSlideEvents_CWBindingStatusUpdatedEvent e) {
            if ((this.CWBindingStatusUpdated != null)) {
                this.CWBindingStatusUpdated(sender, e);
            }
        }
    }
    
    public delegate void _DCWSlideEvents_PointerValueChangedEventHandler(object sender, _DCWSlideEvents_PointerValueChangedEvent e);
    
    public class _DCWSlideEvents_PointerValueChangedEvent {
        
        public int pointer;
        
        public object value;
        
        public _DCWSlideEvents_PointerValueChangedEvent(int pointer, object value) {
            this.pointer = pointer;
            this.value = value;
        }
    }
    
    public delegate void _DCWSlideEvents_KeyDownEventHandler(object sender, _DCWSlideEvents_KeyDownEvent e);
    
    public class _DCWSlideEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DCWSlideEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DCWSlideEvents_KeyPressEventHandler(object sender, _DCWSlideEvents_KeyPressEvent e);
    
    public class _DCWSlideEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public _DCWSlideEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void _DCWSlideEvents_KeyUpEventHandler(object sender, _DCWSlideEvents_KeyUpEvent e);
    
    public class _DCWSlideEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DCWSlideEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DCWSlideEvents_MouseDownEventHandler(object sender, _DCWSlideEvents_MouseDownEvent e);
    
    public class _DCWSlideEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWSlideEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWSlideEvents_MouseMoveEventHandler(object sender, _DCWSlideEvents_MouseMoveEvent e);
    
    public class _DCWSlideEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWSlideEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWSlideEvents_MouseUpEventHandler(object sender, _DCWSlideEvents_MouseUpEvent e);
    
    public class _DCWSlideEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWSlideEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWSlideEvents_PointerValueCommittedEventHandler(object sender, _DCWSlideEvents_PointerValueCommittedEvent e);
    
    public class _DCWSlideEvents_PointerValueCommittedEvent {
        
        public int pointer;
        
        public object value;
        
        public _DCWSlideEvents_PointerValueCommittedEvent(int pointer, object value) {
            this.pointer = pointer;
            this.value = value;
        }
    }
    
    public delegate void _DCWSlideEvents_CWBindingDataUpdatedEventHandler(object sender, _DCWSlideEvents_CWBindingDataUpdatedEvent e);
    
    public class _DCWSlideEvents_CWBindingDataUpdatedEvent {
        
        public short index;
        
        public CWUIControlsLib.CWData data;
        
        public bool ignore;
        
        public _DCWSlideEvents_CWBindingDataUpdatedEvent(short index, CWUIControlsLib.CWData data, bool ignore) {
            this.index = index;
            this.data = data;
            this.ignore = ignore;
        }
    }
    
    public delegate void _DCWSlideEvents_CWBindingStatusUpdatedEventHandler(object sender, _DCWSlideEvents_CWBindingStatusUpdatedEvent e);
    
    public class _DCWSlideEvents_CWBindingStatusUpdatedEvent {
        
        public short index;
        
        public int status;
        
        public int error;
        
        public string message;
        
        public _DCWSlideEvents_CWBindingStatusUpdatedEvent(short index, int status, int error, string message) {
            this.index = index;
            this.status = status;
            this.error = error;
            this.message = message;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxCWSlideEventMulticaster : CWUIControlsLib._DCWSlideEvents {
        
        private AxCWSlide parent;
        
        public AxCWSlideEventMulticaster(AxCWSlide parent) {
            this.parent = parent;
        }
        
        public virtual void PointerValueChanged(int pointer, ref object value) {
            _DCWSlideEvents_PointerValueChangedEvent pointervaluechangedEvent = new _DCWSlideEvents_PointerValueChangedEvent(pointer, value);
            this.parent.RaiseOnPointerValueChanged(this.parent, pointervaluechangedEvent);
            value = pointervaluechangedEvent.value;
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            _DCWSlideEvents_KeyDownEvent keydownEvent = new _DCWSlideEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void ReadyStateChange() {
            System.EventArgs readystatechangeEvent = new System.EventArgs();
            this.parent.RaiseOnReadyStateChange(this.parent, readystatechangeEvent);
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            _DCWSlideEvents_KeyPressEvent keypressEvent = new _DCWSlideEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            _DCWSlideEvents_KeyUpEvent keyupEvent = new _DCWSlideEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            _DCWSlideEvents_MouseDownEvent mousedownEvent = new _DCWSlideEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            _DCWSlideEvents_MouseMoveEvent mousemoveEvent = new _DCWSlideEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            _DCWSlideEvents_MouseUpEvent mouseupEvent = new _DCWSlideEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void PointerValueCommitted(int pointer, ref object value) {
            _DCWSlideEvents_PointerValueCommittedEvent pointervaluecommittedEvent = new _DCWSlideEvents_PointerValueCommittedEvent(pointer, value);
            this.parent.RaiseOnPointerValueCommitted(this.parent, pointervaluecommittedEvent);
            value = pointervaluecommittedEvent.value;
        }
        
        public virtual void CWBindingDataUpdated(short index, CWUIControlsLib.CWData data, ref bool ignore) {
            _DCWSlideEvents_CWBindingDataUpdatedEvent cwbindingdataupdatedEvent = new _DCWSlideEvents_CWBindingDataUpdatedEvent(index, data, ignore);
            this.parent.RaiseOnCWBindingDataUpdated(this.parent, cwbindingdataupdatedEvent);
            ignore = cwbindingdataupdatedEvent.ignore;
        }
        
        public virtual void CWBindingStatusUpdated(short index, int status, int error, string message) {
            _DCWSlideEvents_CWBindingStatusUpdatedEvent cwbindingstatusupdatedEvent = new _DCWSlideEvents_CWBindingStatusUpdatedEvent(index, status, error, message);
            this.parent.RaiseOnCWBindingStatusUpdated(this.parent, cwbindingstatusupdatedEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{d940e4d2-6079-11ce-88cb-0020af6845f6}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("PointerValueChanged")]
    [System.ComponentModel.DefaultProperty("_Value")]
    public class AxCWKnob : System.Windows.Forms.AxHost {
        
        private CWUIControlsLib._DCWKnob ocx;
        
        private AxCWKnobEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxCWKnob() : 
                base("d940e4d2-6079-11ce-88cb-0020af6845f6") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(0)]
        public virtual object _Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx._Value;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx._Value = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(261)]
        public virtual CWUIControlsLib.CWPointer ActivePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ActivePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ActivePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ActivePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ActivePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-518)]
        public virtual string Caption {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Caption", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Caption;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Caption", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Caption = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("CWUIControlsLib.IFontDisp")]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((CWUIControlsLib.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(263)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color CaptionColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CaptionColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.CaptionColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CaptionColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CaptionColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-525)]
        public virtual int ReadyState {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadyState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ReadyState;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadyState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ReadyState = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(259)]
        public virtual CWUIControlsLib.CWStatistics Statistics {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Statistics", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Statistics;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Statistics", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Statistics = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color BackColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
                }
                else {
                    return base.BackColor;
                }
            }
            set {
                base.BackColor = value;
                if ((this.ocx != null)) {
                    this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(262)]
        public virtual int ValuePairIndex {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ValuePairIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ValuePairIndex;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ValuePairIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ValuePairIndex = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(257)]
        public virtual object Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Value;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Value = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-513)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color ForeColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.ForeColor)));
                }
                else {
                    return base.ForeColor;
                }
            }
            set {
                base.ForeColor = value;
                if ((this.ocx != null)) {
                    this.ocx.ForeColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(266)]
        public virtual bool ImmediateUpdates {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImmediateUpdates", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImmediateUpdates;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImmediateUpdates", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImmediateUpdates = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(264)]
        public virtual CWUIControlsLib.CWShowFocusModes ShowFocusMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowFocusMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowFocusMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowFocusMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowFocusMode = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(268)]
        public virtual CWUIControlsLib.CWPictureDisp CtlBackgroundImage {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackgroundImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BackgroundImage;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackgroundImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackgroundImage = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(269)]
        public virtual bool Windowless {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Windowless", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Windowless;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Windowless", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Windowless = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(272)]
        public virtual object IncDecValue {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IncDecValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IncDecValue;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IncDecValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IncDecValue = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(273)]
        public virtual CWUIControlsLib.CWKeyboardModes KeyboardMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("KeyboardMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.KeyboardMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("KeyboardMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.KeyboardMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(288)]
        public virtual bool ValuePairsOnly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ValuePairsOnly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ValuePairsOnly;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ValuePairsOnly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ValuePairsOnly = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(274)]
        public virtual double ArcStart {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ArcStart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ArcStart;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ArcStart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ArcStart = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(275)]
        public virtual double ArcEnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ArcEnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ArcEnd;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ArcEnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ArcEnd = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(258)]
        public virtual CWUIControlsLib.CWAxis Axis {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Axis", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Axis;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(260)]
        public virtual CWUIControlsLib.CWPointers Pointers {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Pointers", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Pointers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(277)]
        public virtual CWUIControlsLib.CWBindings CWBindings {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CWBindings", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CWBindings;
            }
        }
        
        public event _DCWKnobEvents_PointerValueChangedEventHandler PointerValueChanged;
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DblClick;
        
        public event _DCWKnobEvents_KeyDownEventHandler KeyDownEvent;
        
        public event System.EventHandler ReadyStateChange;
        
        public event _DCWKnobEvents_KeyPressEventHandler KeyPressEvent;
        
        public event _DCWKnobEvents_KeyUpEventHandler KeyUpEvent;
        
        public event _DCWKnobEvents_MouseDownEventHandler MouseDownEvent;
        
        public event _DCWKnobEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event _DCWKnobEvents_MouseUpEventHandler MouseUpEvent;
        
        public event _DCWKnobEvents_PointerValueCommittedEventHandler PointerValueCommitted;
        
        public event _DCWKnobEvents_CWBindingDataUpdatedEventHandler CWBindingDataUpdated;
        
        public event _DCWKnobEvents_CWBindingStatusUpdatedEventHandler CWBindingStatusUpdated;
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void ImportStyle(string fileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImportStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ImportStyle(fileName);
        }
        
        public virtual void ExportStyle(string fileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExportStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ExportStyle(fileName);
        }
        
        public virtual CWUIControlsLib.CWImage Images(object item) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Images", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.CWImage returnValue = ((CWUIControlsLib.CWImage)(this.ocx.Images(item)));
            return returnValue;
        }
        
        public virtual System.Drawing.Image ControlImage() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.IPictureDisp returnValue = ((CWUIControlsLib.IPictureDisp)(this.ocx.ControlImage()));
            return GetPictureFromIPicture(returnValue);
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void SetBuiltinStyle(CWUIControlsLib.CWKnobStyles style) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetBuiltinStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetBuiltinStyle(style);
        }
        
        public virtual System.Drawing.Image ControlImageEx(int dpiX, int dpiY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlImageEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.IPictureDisp returnValue = ((CWUIControlsLib.IPictureDisp)(this.ocx.ControlImageEx(dpiX, dpiY)));
            return GetPictureFromIPicture(returnValue);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxCWKnobEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(CWUIControlsLib._DCWKnobEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((CWUIControlsLib._DCWKnob)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnPointerValueChanged(object sender, _DCWKnobEvents_PointerValueChangedEvent e) {
            if ((this.PointerValueChanged != null)) {
                this.PointerValueChanged(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, _DCWKnobEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnReadyStateChange(object sender, System.EventArgs e) {
            if ((this.ReadyStateChange != null)) {
                this.ReadyStateChange(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, _DCWKnobEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, _DCWKnobEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, _DCWKnobEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, _DCWKnobEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, _DCWKnobEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnPointerValueCommitted(object sender, _DCWKnobEvents_PointerValueCommittedEvent e) {
            if ((this.PointerValueCommitted != null)) {
                this.PointerValueCommitted(sender, e);
            }
        }
        
        internal void RaiseOnCWBindingDataUpdated(object sender, _DCWKnobEvents_CWBindingDataUpdatedEvent e) {
            if ((this.CWBindingDataUpdated != null)) {
                this.CWBindingDataUpdated(sender, e);
            }
        }
        
        internal void RaiseOnCWBindingStatusUpdated(object sender, _DCWKnobEvents_CWBindingStatusUpdatedEvent e) {
            if ((this.CWBindingStatusUpdated != null)) {
                this.CWBindingStatusUpdated(sender, e);
            }
        }
    }
    
    public delegate void _DCWKnobEvents_PointerValueChangedEventHandler(object sender, _DCWKnobEvents_PointerValueChangedEvent e);
    
    public class _DCWKnobEvents_PointerValueChangedEvent {
        
        public int pointer;
        
        public object value;
        
        public _DCWKnobEvents_PointerValueChangedEvent(int pointer, object value) {
            this.pointer = pointer;
            this.value = value;
        }
    }
    
    public delegate void _DCWKnobEvents_KeyDownEventHandler(object sender, _DCWKnobEvents_KeyDownEvent e);
    
    public class _DCWKnobEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DCWKnobEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DCWKnobEvents_KeyPressEventHandler(object sender, _DCWKnobEvents_KeyPressEvent e);
    
    public class _DCWKnobEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public _DCWKnobEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void _DCWKnobEvents_KeyUpEventHandler(object sender, _DCWKnobEvents_KeyUpEvent e);
    
    public class _DCWKnobEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DCWKnobEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DCWKnobEvents_MouseDownEventHandler(object sender, _DCWKnobEvents_MouseDownEvent e);
    
    public class _DCWKnobEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWKnobEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWKnobEvents_MouseMoveEventHandler(object sender, _DCWKnobEvents_MouseMoveEvent e);
    
    public class _DCWKnobEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWKnobEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWKnobEvents_MouseUpEventHandler(object sender, _DCWKnobEvents_MouseUpEvent e);
    
    public class _DCWKnobEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWKnobEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWKnobEvents_PointerValueCommittedEventHandler(object sender, _DCWKnobEvents_PointerValueCommittedEvent e);
    
    public class _DCWKnobEvents_PointerValueCommittedEvent {
        
        public int pointer;
        
        public object value;
        
        public _DCWKnobEvents_PointerValueCommittedEvent(int pointer, object value) {
            this.pointer = pointer;
            this.value = value;
        }
    }
    
    public delegate void _DCWKnobEvents_CWBindingDataUpdatedEventHandler(object sender, _DCWKnobEvents_CWBindingDataUpdatedEvent e);
    
    public class _DCWKnobEvents_CWBindingDataUpdatedEvent {
        
        public short index;
        
        public CWUIControlsLib.CWData data;
        
        public bool ignore;
        
        public _DCWKnobEvents_CWBindingDataUpdatedEvent(short index, CWUIControlsLib.CWData data, bool ignore) {
            this.index = index;
            this.data = data;
            this.ignore = ignore;
        }
    }
    
    public delegate void _DCWKnobEvents_CWBindingStatusUpdatedEventHandler(object sender, _DCWKnobEvents_CWBindingStatusUpdatedEvent e);
    
    public class _DCWKnobEvents_CWBindingStatusUpdatedEvent {
        
        public short index;
        
        public int status;
        
        public int error;
        
        public string message;
        
        public _DCWKnobEvents_CWBindingStatusUpdatedEvent(short index, int status, int error, string message) {
            this.index = index;
            this.status = status;
            this.error = error;
            this.message = message;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxCWKnobEventMulticaster : CWUIControlsLib._DCWKnobEvents {
        
        private AxCWKnob parent;
        
        public AxCWKnobEventMulticaster(AxCWKnob parent) {
            this.parent = parent;
        }
        
        public virtual void PointerValueChanged(int pointer, ref object value) {
            _DCWKnobEvents_PointerValueChangedEvent pointervaluechangedEvent = new _DCWKnobEvents_PointerValueChangedEvent(pointer, value);
            this.parent.RaiseOnPointerValueChanged(this.parent, pointervaluechangedEvent);
            value = pointervaluechangedEvent.value;
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            _DCWKnobEvents_KeyDownEvent keydownEvent = new _DCWKnobEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void ReadyStateChange() {
            System.EventArgs readystatechangeEvent = new System.EventArgs();
            this.parent.RaiseOnReadyStateChange(this.parent, readystatechangeEvent);
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            _DCWKnobEvents_KeyPressEvent keypressEvent = new _DCWKnobEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            _DCWKnobEvents_KeyUpEvent keyupEvent = new _DCWKnobEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            _DCWKnobEvents_MouseDownEvent mousedownEvent = new _DCWKnobEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            _DCWKnobEvents_MouseMoveEvent mousemoveEvent = new _DCWKnobEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            _DCWKnobEvents_MouseUpEvent mouseupEvent = new _DCWKnobEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void PointerValueCommitted(int pointer, ref object value) {
            _DCWKnobEvents_PointerValueCommittedEvent pointervaluecommittedEvent = new _DCWKnobEvents_PointerValueCommittedEvent(pointer, value);
            this.parent.RaiseOnPointerValueCommitted(this.parent, pointervaluecommittedEvent);
            value = pointervaluecommittedEvent.value;
        }
        
        public virtual void CWBindingDataUpdated(short index, CWUIControlsLib.CWData data, ref bool ignore) {
            _DCWKnobEvents_CWBindingDataUpdatedEvent cwbindingdataupdatedEvent = new _DCWKnobEvents_CWBindingDataUpdatedEvent(index, data, ignore);
            this.parent.RaiseOnCWBindingDataUpdated(this.parent, cwbindingdataupdatedEvent);
            ignore = cwbindingdataupdatedEvent.ignore;
        }
        
        public virtual void CWBindingStatusUpdated(short index, int status, int error, string message) {
            _DCWKnobEvents_CWBindingStatusUpdatedEvent cwbindingstatusupdatedEvent = new _DCWKnobEvents_CWBindingStatusUpdatedEvent(index, status, error, message);
            this.parent.RaiseOnCWBindingStatusUpdated(this.parent, cwbindingstatusupdatedEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{b68dbfab-16a0-11ce-80bf-0020af31cef9}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("CursorChange")]
    public class AxCWGraph : System.Windows.Forms.AxHost {
        
        private CWUIControlsLib._DCWGraph ocx;
        
        private AxCWGraphEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxCWGraph() : 
                base("b68dbfab-16a0-11ce-80bf-0020af31cef9") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color PlotAreaColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotAreaColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.PlotAreaColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotAreaColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PlotAreaColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual CWUIControlsLib.CWPictureDisp PlotAreaImage {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotAreaImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PlotAreaImage;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotAreaImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PlotAreaImage = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual CWUIControlsLib.CWGraphTrackModes TrackMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TrackMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TrackMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TrackMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TrackMode = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("CWUIControlsLib.IFontDisp")]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((CWUIControlsLib.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual CWUIControlsLib.CWPlot PlotTemplate {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotTemplate", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PlotTemplate;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotTemplate", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PlotTemplate = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual CWUIControlsLib.CWChartStyles ChartStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ChartStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual int ChartLength {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ChartLength;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartLength = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual CWUIControlsLib.CWPictureDisp GraphFrameImage {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GraphFrameImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GraphFrameImage;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GraphFrameImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GraphFrameImage = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color GraphFrameColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GraphFrameColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.GraphFrameColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GraphFrameColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GraphFrameColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual bool ImmediateUpdates {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImmediateUpdates", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImmediateUpdates;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImmediateUpdates", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImmediateUpdates = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-518)]
        public virtual string Caption {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Caption", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Caption;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Caption", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Caption = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color BackColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
                }
                else {
                    return base.BackColor;
                }
            }
            set {
                base.BackColor = value;
                if ((this.ocx != null)) {
                    this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-525)]
        public virtual int ReadyState {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadyState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ReadyState;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadyState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ReadyState = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Windowless {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Windowless", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Windowless;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Windowless", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Windowless = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color CaptionColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CaptionColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.CaptionColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CaptionColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CaptionColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual CWUIControlsLib.CWKeyboardModes KeyboardMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("KeyboardMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.KeyboardMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("KeyboardMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.KeyboardMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual double DefaultxInc {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DefaultxInc", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DefaultxInc;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DefaultxInc", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DefaultxInc = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual double DefaultxFirst {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DefaultxFirst", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DefaultxFirst;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DefaultxFirst", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DefaultxFirst = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual bool DefaultPlotPerRow {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DefaultPlotPerRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DefaultPlotPerRow;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DefaultPlotPerRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DefaultPlotPerRow = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual object YDataAppend {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("YDataAppend", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.YDataAppend;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("YDataAppend", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.YDataAppend = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual object XYDataAppend {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("XYDataAppend", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.XYDataAppend;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("XYDataAppend", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.XYDataAppend = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        public virtual object YData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("YData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.YData;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("YData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.YData = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(37)]
        public virtual object XYData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("XYData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.XYData;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("XYData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.XYData = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(38)]
        public virtual CWUIControlsLib.CWGraphFrameStyles GraphFrameStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GraphFrameStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GraphFrameStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GraphFrameStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GraphFrameStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(40)]
        public virtual CWUIControlsLib.CWAnnotation AnnotationTemplate {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AnnotationTemplate", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AnnotationTemplate;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AnnotationTemplate", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AnnotationTemplate = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual CWUIControlsLib.CWPlots Plots {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Plots", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Plots;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual CWUIControlsLib.CWAxes Axes {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Axes", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Axes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual CWUIControlsLib.CWCursors Cursors {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Cursors", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Cursors;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(277)]
        public virtual CWUIControlsLib.CWBindings CWBindings {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CWBindings", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CWBindings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(39)]
        public virtual CWUIControlsLib.CWAnnotations Annotations {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Annotations", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Annotations;
            }
        }
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DblClick;
        
        public event _DCWGraphEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event _DCWGraphEvents_MouseUpEventHandler MouseUpEvent;
        
        public event _DCWGraphEvents_MouseDownEventHandler MouseDownEvent;
        
        public event _DCWGraphEvents_KeyDownEventHandler KeyDownEvent;
        
        public event _DCWGraphEvents_KeyPressEventHandler KeyPressEvent;
        
        public event _DCWGraphEvents_KeyUpEventHandler KeyUpEvent;
        
        public event _DCWGraphEvents_CursorChangeEventHandler CursorChange;
        
        public event _DCWGraphEvents_CursorMouseMoveEventHandler CursorMouseMove;
        
        public event _DCWGraphEvents_CursorMouseUpEventHandler CursorMouseUp;
        
        public event _DCWGraphEvents_CursorMouseDownEventHandler CursorMouseDown;
        
        public event _DCWGraphEvents_PlotMouseDownEventHandler PlotMouseDown;
        
        public event _DCWGraphEvents_PlotMouseMoveEventHandler PlotMouseMove;
        
        public event _DCWGraphEvents_PlotMouseUpEventHandler PlotMouseUp;
        
        public event _DCWGraphEvents_PlotAreaMouseDownEventHandler PlotAreaMouseDown;
        
        public event _DCWGraphEvents_PlotAreaMouseMoveEventHandler PlotAreaMouseMove;
        
        public event _DCWGraphEvents_PlotAreaMouseUpEventHandler PlotAreaMouseUp;
        
        public event _DCWGraphEvents_AnnotationChangeEventHandler AnnotationChange;
        
        public event _DCWGraphEvents_AnnotationMouseMoveEventHandler AnnotationMouseMove;
        
        public event _DCWGraphEvents_AnnotationMouseUpEventHandler AnnotationMouseUp;
        
        public event _DCWGraphEvents_AnnotationMouseDownEventHandler AnnotationMouseDown;
        
        public event System.EventHandler Zoom;
        
        public event System.EventHandler Pan;
        
        public event System.EventHandler ReadyStateChange;
        
        public event _DCWGraphEvents_CWBindingDataUpdatedEventHandler CWBindingDataUpdated;
        
        public event _DCWGraphEvents_CWBindingStatusUpdatedEventHandler CWBindingStatusUpdated;
        
        public event _DCWGraphEvents_PlotAreaBoundsChangeEventHandler PlotAreaBoundsChange;
        
        public virtual void ExportStyle(string fileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExportStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ExportStyle(fileName);
        }
        
        public virtual CWUIControlsLib.CWImage Images(object item) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Images", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.CWImage returnValue = ((CWUIControlsLib.CWImage)(this.ocx.Images(item)));
            return returnValue;
        }
        
        public virtual System.Drawing.Image ControlImage() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.IPictureDisp returnValue = ((CWUIControlsLib.IPictureDisp)(this.ocx.ControlImage()));
            return GetPictureFromIPicture(returnValue);
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual System.Drawing.Image ControlImageEx(int dpiX, int dpiY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlImageEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.IPictureDisp returnValue = ((CWUIControlsLib.IPictureDisp)(this.ocx.ControlImageEx(dpiX, dpiY)));
            return GetPictureFromIPicture(returnValue);
        }
        
        public virtual void GetPlotAreaBounds(ref int left, ref int top, ref int width, ref int height) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetPlotAreaBounds", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetPlotAreaBounds(ref left, ref top, ref width, ref height);
        }
        
        public virtual void PlotXvsY(object xData, object yData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotXvsY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    xData,
                    yData,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(CWUIControlsLib._DCWGraph);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("PlotXvsY");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void PlotXvsY(object xData, object yData, object bPlotPerRow) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotXvsY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PlotXvsY(xData, yData, bPlotPerRow);
        }
        
        public virtual void PlotY(object yData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    yData,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(CWUIControlsLib._DCWGraph);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("PlotY");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void PlotY(object yData, object xFirst, object xInc, object bPlotPerRow) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PlotY(yData, xFirst, xInc, bPlotPerRow);
        }
        
        public virtual void PlotXY(object xYData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotXY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    xYData,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(CWUIControlsLib._DCWGraph);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("PlotXY");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void PlotXY(object xYData, object bPlotPerRow) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlotXY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PlotXY(xYData, bPlotPerRow);
        }
        
        public virtual void ChartY(object yData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    yData,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(CWUIControlsLib._DCWGraph);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("ChartY");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void ChartY(object yData, object xInc, object bChartPerRow) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ChartY(yData, xInc, bChartPerRow);
        }
        
        public virtual void ChartXY(object xYData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartXY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    xYData,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(CWUIControlsLib._DCWGraph);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("ChartXY");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void ChartXY(object xYData, object bChartPerRow) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartXY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ChartXY(xYData, bChartPerRow);
        }
        
        public virtual void ChartXvsY(object xData, object yData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartXvsY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    xData,
                    yData,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(CWUIControlsLib._DCWGraph);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("ChartXvsY");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void ChartXvsY(object xData, object yData, object bChartPerRow) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartXvsY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ChartXvsY(xData, yData, bChartPerRow);
        }
        
        public virtual void ClearData() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearData();
        }
        
        public virtual void ImportStyle(string fileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImportStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ImportStyle(fileName);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxCWGraphEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(CWUIControlsLib._DCWGraphEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((CWUIControlsLib._DCWGraph)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, _DCWGraphEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, _DCWGraphEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, _DCWGraphEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, _DCWGraphEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, _DCWGraphEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, _DCWGraphEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnCursorChange(object sender, _DCWGraphEvents_CursorChangeEvent e) {
            if ((this.CursorChange != null)) {
                this.CursorChange(sender, e);
            }
        }
        
        internal void RaiseOnCursorMouseMove(object sender, _DCWGraphEvents_CursorMouseMoveEvent e) {
            if ((this.CursorMouseMove != null)) {
                this.CursorMouseMove(sender, e);
            }
        }
        
        internal void RaiseOnCursorMouseUp(object sender, _DCWGraphEvents_CursorMouseUpEvent e) {
            if ((this.CursorMouseUp != null)) {
                this.CursorMouseUp(sender, e);
            }
        }
        
        internal void RaiseOnCursorMouseDown(object sender, _DCWGraphEvents_CursorMouseDownEvent e) {
            if ((this.CursorMouseDown != null)) {
                this.CursorMouseDown(sender, e);
            }
        }
        
        internal void RaiseOnPlotMouseDown(object sender, _DCWGraphEvents_PlotMouseDownEvent e) {
            if ((this.PlotMouseDown != null)) {
                this.PlotMouseDown(sender, e);
            }
        }
        
        internal void RaiseOnPlotMouseMove(object sender, _DCWGraphEvents_PlotMouseMoveEvent e) {
            if ((this.PlotMouseMove != null)) {
                this.PlotMouseMove(sender, e);
            }
        }
        
        internal void RaiseOnPlotMouseUp(object sender, _DCWGraphEvents_PlotMouseUpEvent e) {
            if ((this.PlotMouseUp != null)) {
                this.PlotMouseUp(sender, e);
            }
        }
        
        internal void RaiseOnPlotAreaMouseDown(object sender, _DCWGraphEvents_PlotAreaMouseDownEvent e) {
            if ((this.PlotAreaMouseDown != null)) {
                this.PlotAreaMouseDown(sender, e);
            }
        }
        
        internal void RaiseOnPlotAreaMouseMove(object sender, _DCWGraphEvents_PlotAreaMouseMoveEvent e) {
            if ((this.PlotAreaMouseMove != null)) {
                this.PlotAreaMouseMove(sender, e);
            }
        }
        
        internal void RaiseOnPlotAreaMouseUp(object sender, _DCWGraphEvents_PlotAreaMouseUpEvent e) {
            if ((this.PlotAreaMouseUp != null)) {
                this.PlotAreaMouseUp(sender, e);
            }
        }
        
        internal void RaiseOnAnnotationChange(object sender, _DCWGraphEvents_AnnotationChangeEvent e) {
            if ((this.AnnotationChange != null)) {
                this.AnnotationChange(sender, e);
            }
        }
        
        internal void RaiseOnAnnotationMouseMove(object sender, _DCWGraphEvents_AnnotationMouseMoveEvent e) {
            if ((this.AnnotationMouseMove != null)) {
                this.AnnotationMouseMove(sender, e);
            }
        }
        
        internal void RaiseOnAnnotationMouseUp(object sender, _DCWGraphEvents_AnnotationMouseUpEvent e) {
            if ((this.AnnotationMouseUp != null)) {
                this.AnnotationMouseUp(sender, e);
            }
        }
        
        internal void RaiseOnAnnotationMouseDown(object sender, _DCWGraphEvents_AnnotationMouseDownEvent e) {
            if ((this.AnnotationMouseDown != null)) {
                this.AnnotationMouseDown(sender, e);
            }
        }
        
        internal void RaiseOnZoom(object sender, System.EventArgs e) {
            if ((this.Zoom != null)) {
                this.Zoom(sender, e);
            }
        }
        
        internal void RaiseOnPan(object sender, System.EventArgs e) {
            if ((this.Pan != null)) {
                this.Pan(sender, e);
            }
        }
        
        internal void RaiseOnReadyStateChange(object sender, System.EventArgs e) {
            if ((this.ReadyStateChange != null)) {
                this.ReadyStateChange(sender, e);
            }
        }
        
        internal void RaiseOnCWBindingDataUpdated(object sender, _DCWGraphEvents_CWBindingDataUpdatedEvent e) {
            if ((this.CWBindingDataUpdated != null)) {
                this.CWBindingDataUpdated(sender, e);
            }
        }
        
        internal void RaiseOnCWBindingStatusUpdated(object sender, _DCWGraphEvents_CWBindingStatusUpdatedEvent e) {
            if ((this.CWBindingStatusUpdated != null)) {
                this.CWBindingStatusUpdated(sender, e);
            }
        }
        
        internal void RaiseOnPlotAreaBoundsChange(object sender, _DCWGraphEvents_PlotAreaBoundsChangeEvent e) {
            if ((this.PlotAreaBoundsChange != null)) {
                this.PlotAreaBoundsChange(sender, e);
            }
        }
    }
    
    public delegate void _DCWGraphEvents_MouseMoveEventHandler(object sender, _DCWGraphEvents_MouseMoveEvent e);
    
    public class _DCWGraphEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWGraphEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWGraphEvents_MouseUpEventHandler(object sender, _DCWGraphEvents_MouseUpEvent e);
    
    public class _DCWGraphEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWGraphEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWGraphEvents_MouseDownEventHandler(object sender, _DCWGraphEvents_MouseDownEvent e);
    
    public class _DCWGraphEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWGraphEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWGraphEvents_KeyDownEventHandler(object sender, _DCWGraphEvents_KeyDownEvent e);
    
    public class _DCWGraphEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DCWGraphEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DCWGraphEvents_KeyPressEventHandler(object sender, _DCWGraphEvents_KeyPressEvent e);
    
    public class _DCWGraphEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public _DCWGraphEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void _DCWGraphEvents_KeyUpEventHandler(object sender, _DCWGraphEvents_KeyUpEvent e);
    
    public class _DCWGraphEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DCWGraphEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DCWGraphEvents_CursorChangeEventHandler(object sender, _DCWGraphEvents_CursorChangeEvent e);
    
    public class _DCWGraphEvents_CursorChangeEvent {
        
        public int cursorIndex;
        
        public object xPos;
        
        public object yPos;
        
        public bool bTracking;
        
        public _DCWGraphEvents_CursorChangeEvent(int cursorIndex, object xPos, object yPos, bool bTracking) {
            this.cursorIndex = cursorIndex;
            this.xPos = xPos;
            this.yPos = yPos;
            this.bTracking = bTracking;
        }
    }
    
    public delegate void _DCWGraphEvents_CursorMouseMoveEventHandler(object sender, _DCWGraphEvents_CursorMouseMoveEvent e);
    
    public class _DCWGraphEvents_CursorMouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public object xPos;
        
        public object yPos;
        
        public short cursorIndex;
        
        public int cursorPart;
        
        public _DCWGraphEvents_CursorMouseMoveEvent(short button, short shift, object xPos, object yPos, short cursorIndex, int cursorPart) {
            this.button = button;
            this.shift = shift;
            this.xPos = xPos;
            this.yPos = yPos;
            this.cursorIndex = cursorIndex;
            this.cursorPart = cursorPart;
        }
    }
    
    public delegate void _DCWGraphEvents_CursorMouseUpEventHandler(object sender, _DCWGraphEvents_CursorMouseUpEvent e);
    
    public class _DCWGraphEvents_CursorMouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public object xPos;
        
        public object yPos;
        
        public short cursorIndex;
        
        public int cursorPart;
        
        public _DCWGraphEvents_CursorMouseUpEvent(short button, short shift, object xPos, object yPos, short cursorIndex, int cursorPart) {
            this.button = button;
            this.shift = shift;
            this.xPos = xPos;
            this.yPos = yPos;
            this.cursorIndex = cursorIndex;
            this.cursorPart = cursorPart;
        }
    }
    
    public delegate void _DCWGraphEvents_CursorMouseDownEventHandler(object sender, _DCWGraphEvents_CursorMouseDownEvent e);
    
    public class _DCWGraphEvents_CursorMouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public object xPos;
        
        public object yPos;
        
        public short cursorIndex;
        
        public int cursorPart;
        
        public _DCWGraphEvents_CursorMouseDownEvent(short button, short shift, object xPos, object yPos, short cursorIndex, int cursorPart) {
            this.button = button;
            this.shift = shift;
            this.xPos = xPos;
            this.yPos = yPos;
            this.cursorIndex = cursorIndex;
            this.cursorPart = cursorPart;
        }
    }
    
    public delegate void _DCWGraphEvents_PlotMouseDownEventHandler(object sender, _DCWGraphEvents_PlotMouseDownEvent e);
    
    public class _DCWGraphEvents_PlotMouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public object xData;
        
        public object yData;
        
        public short plotIndex;
        
        public int pointIndex;
        
        public _DCWGraphEvents_PlotMouseDownEvent(short button, short shift, object xData, object yData, short plotIndex, int pointIndex) {
            this.button = button;
            this.shift = shift;
            this.xData = xData;
            this.yData = yData;
            this.plotIndex = plotIndex;
            this.pointIndex = pointIndex;
        }
    }
    
    public delegate void _DCWGraphEvents_PlotMouseMoveEventHandler(object sender, _DCWGraphEvents_PlotMouseMoveEvent e);
    
    public class _DCWGraphEvents_PlotMouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public object xData;
        
        public object yData;
        
        public short plotIndex;
        
        public int pointIndex;
        
        public _DCWGraphEvents_PlotMouseMoveEvent(short button, short shift, object xData, object yData, short plotIndex, int pointIndex) {
            this.button = button;
            this.shift = shift;
            this.xData = xData;
            this.yData = yData;
            this.plotIndex = plotIndex;
            this.pointIndex = pointIndex;
        }
    }
    
    public delegate void _DCWGraphEvents_PlotMouseUpEventHandler(object sender, _DCWGraphEvents_PlotMouseUpEvent e);
    
    public class _DCWGraphEvents_PlotMouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public object xData;
        
        public object yData;
        
        public short plotIndex;
        
        public int pointIndex;
        
        public _DCWGraphEvents_PlotMouseUpEvent(short button, short shift, object xData, object yData, short plotIndex, int pointIndex) {
            this.button = button;
            this.shift = shift;
            this.xData = xData;
            this.yData = yData;
            this.plotIndex = plotIndex;
            this.pointIndex = pointIndex;
        }
    }
    
    public delegate void _DCWGraphEvents_PlotAreaMouseDownEventHandler(object sender, _DCWGraphEvents_PlotAreaMouseDownEvent e);
    
    public class _DCWGraphEvents_PlotAreaMouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public object xPos;
        
        public object yPos;
        
        public _DCWGraphEvents_PlotAreaMouseDownEvent(short button, short shift, object xPos, object yPos) {
            this.button = button;
            this.shift = shift;
            this.xPos = xPos;
            this.yPos = yPos;
        }
    }
    
    public delegate void _DCWGraphEvents_PlotAreaMouseMoveEventHandler(object sender, _DCWGraphEvents_PlotAreaMouseMoveEvent e);
    
    public class _DCWGraphEvents_PlotAreaMouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public object xPos;
        
        public object yPos;
        
        public _DCWGraphEvents_PlotAreaMouseMoveEvent(short button, short shift, object xPos, object yPos) {
            this.button = button;
            this.shift = shift;
            this.xPos = xPos;
            this.yPos = yPos;
        }
    }
    
    public delegate void _DCWGraphEvents_PlotAreaMouseUpEventHandler(object sender, _DCWGraphEvents_PlotAreaMouseUpEvent e);
    
    public class _DCWGraphEvents_PlotAreaMouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public object xPos;
        
        public object yPos;
        
        public _DCWGraphEvents_PlotAreaMouseUpEvent(short button, short shift, object xPos, object yPos) {
            this.button = button;
            this.shift = shift;
            this.xPos = xPos;
            this.yPos = yPos;
        }
    }
    
    public delegate void _DCWGraphEvents_AnnotationChangeEventHandler(object sender, _DCWGraphEvents_AnnotationChangeEvent e);
    
    public class _DCWGraphEvents_AnnotationChangeEvent {
        
        public int annotationIndex;
        
        public int annotationPart;
        
        public bool bTracking;
        
        public _DCWGraphEvents_AnnotationChangeEvent(int annotationIndex, int annotationPart, bool bTracking) {
            this.annotationIndex = annotationIndex;
            this.annotationPart = annotationPart;
            this.bTracking = bTracking;
        }
    }
    
    public delegate void _DCWGraphEvents_AnnotationMouseMoveEventHandler(object sender, _DCWGraphEvents_AnnotationMouseMoveEvent e);
    
    public class _DCWGraphEvents_AnnotationMouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public double xPos;
        
        public double yPos;
        
        public int annotationIndex;
        
        public int annotationPart;
        
        public _DCWGraphEvents_AnnotationMouseMoveEvent(short button, short shift, double xPos, double yPos, int annotationIndex, int annotationPart) {
            this.button = button;
            this.shift = shift;
            this.xPos = xPos;
            this.yPos = yPos;
            this.annotationIndex = annotationIndex;
            this.annotationPart = annotationPart;
        }
    }
    
    public delegate void _DCWGraphEvents_AnnotationMouseUpEventHandler(object sender, _DCWGraphEvents_AnnotationMouseUpEvent e);
    
    public class _DCWGraphEvents_AnnotationMouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public double xPos;
        
        public double yPos;
        
        public int annotationIndex;
        
        public int annotationPart;
        
        public _DCWGraphEvents_AnnotationMouseUpEvent(short button, short shift, double xPos, double yPos, int annotationIndex, int annotationPart) {
            this.button = button;
            this.shift = shift;
            this.xPos = xPos;
            this.yPos = yPos;
            this.annotationIndex = annotationIndex;
            this.annotationPart = annotationPart;
        }
    }
    
    public delegate void _DCWGraphEvents_AnnotationMouseDownEventHandler(object sender, _DCWGraphEvents_AnnotationMouseDownEvent e);
    
    public class _DCWGraphEvents_AnnotationMouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public double xPos;
        
        public double yPos;
        
        public int annotationIndex;
        
        public int annotationPart;
        
        public _DCWGraphEvents_AnnotationMouseDownEvent(short button, short shift, double xPos, double yPos, int annotationIndex, int annotationPart) {
            this.button = button;
            this.shift = shift;
            this.xPos = xPos;
            this.yPos = yPos;
            this.annotationIndex = annotationIndex;
            this.annotationPart = annotationPart;
        }
    }
    
    public delegate void _DCWGraphEvents_CWBindingDataUpdatedEventHandler(object sender, _DCWGraphEvents_CWBindingDataUpdatedEvent e);
    
    public class _DCWGraphEvents_CWBindingDataUpdatedEvent {
        
        public short index;
        
        public CWUIControlsLib.CWData data;
        
        public bool ignore;
        
        public _DCWGraphEvents_CWBindingDataUpdatedEvent(short index, CWUIControlsLib.CWData data, bool ignore) {
            this.index = index;
            this.data = data;
            this.ignore = ignore;
        }
    }
    
    public delegate void _DCWGraphEvents_CWBindingStatusUpdatedEventHandler(object sender, _DCWGraphEvents_CWBindingStatusUpdatedEvent e);
    
    public class _DCWGraphEvents_CWBindingStatusUpdatedEvent {
        
        public short index;
        
        public int status;
        
        public int error;
        
        public string message;
        
        public _DCWGraphEvents_CWBindingStatusUpdatedEvent(short index, int status, int error, string message) {
            this.index = index;
            this.status = status;
            this.error = error;
            this.message = message;
        }
    }
    
    public delegate void _DCWGraphEvents_PlotAreaBoundsChangeEventHandler(object sender, _DCWGraphEvents_PlotAreaBoundsChangeEvent e);
    
    public class _DCWGraphEvents_PlotAreaBoundsChangeEvent {
        
        public int left;
        
        public int top;
        
        public int width;
        
        public int height;
        
        public _DCWGraphEvents_PlotAreaBoundsChangeEvent(int left, int top, int width, int height) {
            this.left = left;
            this.top = top;
            this.width = width;
            this.height = height;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxCWGraphEventMulticaster : CWUIControlsLib._DCWGraphEvents {
        
        private AxCWGraph parent;
        
        public AxCWGraphEventMulticaster(AxCWGraph parent) {
            this.parent = parent;
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            _DCWGraphEvents_MouseMoveEvent mousemoveEvent = new _DCWGraphEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            _DCWGraphEvents_MouseUpEvent mouseupEvent = new _DCWGraphEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            _DCWGraphEvents_MouseDownEvent mousedownEvent = new _DCWGraphEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            _DCWGraphEvents_KeyDownEvent keydownEvent = new _DCWGraphEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            _DCWGraphEvents_KeyPressEvent keypressEvent = new _DCWGraphEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            _DCWGraphEvents_KeyUpEvent keyupEvent = new _DCWGraphEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void CursorChange(ref int cursorIndex, ref object xPos, ref object yPos, ref bool bTracking) {
            _DCWGraphEvents_CursorChangeEvent cursorchangeEvent = new _DCWGraphEvents_CursorChangeEvent(cursorIndex, xPos, yPos, bTracking);
            this.parent.RaiseOnCursorChange(this.parent, cursorchangeEvent);
            cursorIndex = cursorchangeEvent.cursorIndex;
            xPos = cursorchangeEvent.xPos;
            yPos = cursorchangeEvent.yPos;
            bTracking = cursorchangeEvent.bTracking;
        }
        
        public virtual void CursorMouseMove(ref short button, ref short shift, ref object xPos, ref object yPos, ref short cursorIndex, ref int cursorPart) {
            _DCWGraphEvents_CursorMouseMoveEvent cursormousemoveEvent = new _DCWGraphEvents_CursorMouseMoveEvent(button, shift, xPos, yPos, cursorIndex, cursorPart);
            this.parent.RaiseOnCursorMouseMove(this.parent, cursormousemoveEvent);
            button = cursormousemoveEvent.button;
            shift = cursormousemoveEvent.shift;
            xPos = cursormousemoveEvent.xPos;
            yPos = cursormousemoveEvent.yPos;
            cursorIndex = cursormousemoveEvent.cursorIndex;
            cursorPart = cursormousemoveEvent.cursorPart;
        }
        
        public virtual void CursorMouseUp(ref short button, ref short shift, ref object xPos, ref object yPos, ref short cursorIndex, ref int cursorPart) {
            _DCWGraphEvents_CursorMouseUpEvent cursormouseupEvent = new _DCWGraphEvents_CursorMouseUpEvent(button, shift, xPos, yPos, cursorIndex, cursorPart);
            this.parent.RaiseOnCursorMouseUp(this.parent, cursormouseupEvent);
            button = cursormouseupEvent.button;
            shift = cursormouseupEvent.shift;
            xPos = cursormouseupEvent.xPos;
            yPos = cursormouseupEvent.yPos;
            cursorIndex = cursormouseupEvent.cursorIndex;
            cursorPart = cursormouseupEvent.cursorPart;
        }
        
        public virtual void CursorMouseDown(ref short button, ref short shift, ref object xPos, ref object yPos, ref short cursorIndex, ref int cursorPart) {
            _DCWGraphEvents_CursorMouseDownEvent cursormousedownEvent = new _DCWGraphEvents_CursorMouseDownEvent(button, shift, xPos, yPos, cursorIndex, cursorPart);
            this.parent.RaiseOnCursorMouseDown(this.parent, cursormousedownEvent);
            button = cursormousedownEvent.button;
            shift = cursormousedownEvent.shift;
            xPos = cursormousedownEvent.xPos;
            yPos = cursormousedownEvent.yPos;
            cursorIndex = cursormousedownEvent.cursorIndex;
            cursorPart = cursormousedownEvent.cursorPart;
        }
        
        public virtual void PlotMouseDown(ref short button, ref short shift, ref object xData, ref object yData, ref short plotIndex, ref int pointIndex) {
            _DCWGraphEvents_PlotMouseDownEvent plotmousedownEvent = new _DCWGraphEvents_PlotMouseDownEvent(button, shift, xData, yData, plotIndex, pointIndex);
            this.parent.RaiseOnPlotMouseDown(this.parent, plotmousedownEvent);
            button = plotmousedownEvent.button;
            shift = plotmousedownEvent.shift;
            xData = plotmousedownEvent.xData;
            yData = plotmousedownEvent.yData;
            plotIndex = plotmousedownEvent.plotIndex;
            pointIndex = plotmousedownEvent.pointIndex;
        }
        
        public virtual void PlotMouseMove(ref short button, ref short shift, ref object xData, ref object yData, ref short plotIndex, ref int pointIndex) {
            _DCWGraphEvents_PlotMouseMoveEvent plotmousemoveEvent = new _DCWGraphEvents_PlotMouseMoveEvent(button, shift, xData, yData, plotIndex, pointIndex);
            this.parent.RaiseOnPlotMouseMove(this.parent, plotmousemoveEvent);
            button = plotmousemoveEvent.button;
            shift = plotmousemoveEvent.shift;
            xData = plotmousemoveEvent.xData;
            yData = plotmousemoveEvent.yData;
            plotIndex = plotmousemoveEvent.plotIndex;
            pointIndex = plotmousemoveEvent.pointIndex;
        }
        
        public virtual void PlotMouseUp(ref short button, ref short shift, ref object xData, ref object yData, ref short plotIndex, ref int pointIndex) {
            _DCWGraphEvents_PlotMouseUpEvent plotmouseupEvent = new _DCWGraphEvents_PlotMouseUpEvent(button, shift, xData, yData, plotIndex, pointIndex);
            this.parent.RaiseOnPlotMouseUp(this.parent, plotmouseupEvent);
            button = plotmouseupEvent.button;
            shift = plotmouseupEvent.shift;
            xData = plotmouseupEvent.xData;
            yData = plotmouseupEvent.yData;
            plotIndex = plotmouseupEvent.plotIndex;
            pointIndex = plotmouseupEvent.pointIndex;
        }
        
        public virtual void PlotAreaMouseDown(ref short button, ref short shift, ref object xPos, ref object yPos) {
            _DCWGraphEvents_PlotAreaMouseDownEvent plotareamousedownEvent = new _DCWGraphEvents_PlotAreaMouseDownEvent(button, shift, xPos, yPos);
            this.parent.RaiseOnPlotAreaMouseDown(this.parent, plotareamousedownEvent);
            button = plotareamousedownEvent.button;
            shift = plotareamousedownEvent.shift;
            xPos = plotareamousedownEvent.xPos;
            yPos = plotareamousedownEvent.yPos;
        }
        
        public virtual void PlotAreaMouseMove(ref short button, ref short shift, ref object xPos, ref object yPos) {
            _DCWGraphEvents_PlotAreaMouseMoveEvent plotareamousemoveEvent = new _DCWGraphEvents_PlotAreaMouseMoveEvent(button, shift, xPos, yPos);
            this.parent.RaiseOnPlotAreaMouseMove(this.parent, plotareamousemoveEvent);
            button = plotareamousemoveEvent.button;
            shift = plotareamousemoveEvent.shift;
            xPos = plotareamousemoveEvent.xPos;
            yPos = plotareamousemoveEvent.yPos;
        }
        
        public virtual void PlotAreaMouseUp(ref short button, ref short shift, ref object xPos, ref object yPos) {
            _DCWGraphEvents_PlotAreaMouseUpEvent plotareamouseupEvent = new _DCWGraphEvents_PlotAreaMouseUpEvent(button, shift, xPos, yPos);
            this.parent.RaiseOnPlotAreaMouseUp(this.parent, plotareamouseupEvent);
            button = plotareamouseupEvent.button;
            shift = plotareamouseupEvent.shift;
            xPos = plotareamouseupEvent.xPos;
            yPos = plotareamouseupEvent.yPos;
        }
        
        public virtual void AnnotationChange(ref int annotationIndex, ref int annotationPart, ref bool bTracking) {
            _DCWGraphEvents_AnnotationChangeEvent annotationchangeEvent = new _DCWGraphEvents_AnnotationChangeEvent(annotationIndex, annotationPart, bTracking);
            this.parent.RaiseOnAnnotationChange(this.parent, annotationchangeEvent);
            annotationIndex = annotationchangeEvent.annotationIndex;
            annotationPart = annotationchangeEvent.annotationPart;
            bTracking = annotationchangeEvent.bTracking;
        }
        
        public virtual void AnnotationMouseMove(ref short button, ref short shift, ref double xPos, ref double yPos, ref int annotationIndex, ref int annotationPart) {
            _DCWGraphEvents_AnnotationMouseMoveEvent annotationmousemoveEvent = new _DCWGraphEvents_AnnotationMouseMoveEvent(button, shift, xPos, yPos, annotationIndex, annotationPart);
            this.parent.RaiseOnAnnotationMouseMove(this.parent, annotationmousemoveEvent);
            button = annotationmousemoveEvent.button;
            shift = annotationmousemoveEvent.shift;
            xPos = annotationmousemoveEvent.xPos;
            yPos = annotationmousemoveEvent.yPos;
            annotationIndex = annotationmousemoveEvent.annotationIndex;
            annotationPart = annotationmousemoveEvent.annotationPart;
        }
        
        public virtual void AnnotationMouseUp(ref short button, ref short shift, ref double xPos, ref double yPos, ref int annotationIndex, ref int annotationPart) {
            _DCWGraphEvents_AnnotationMouseUpEvent annotationmouseupEvent = new _DCWGraphEvents_AnnotationMouseUpEvent(button, shift, xPos, yPos, annotationIndex, annotationPart);
            this.parent.RaiseOnAnnotationMouseUp(this.parent, annotationmouseupEvent);
            button = annotationmouseupEvent.button;
            shift = annotationmouseupEvent.shift;
            xPos = annotationmouseupEvent.xPos;
            yPos = annotationmouseupEvent.yPos;
            annotationIndex = annotationmouseupEvent.annotationIndex;
            annotationPart = annotationmouseupEvent.annotationPart;
        }
        
        public virtual void AnnotationMouseDown(ref short button, ref short shift, ref double xPos, ref double yPos, ref int annotationIndex, ref int annotationPart) {
            _DCWGraphEvents_AnnotationMouseDownEvent annotationmousedownEvent = new _DCWGraphEvents_AnnotationMouseDownEvent(button, shift, xPos, yPos, annotationIndex, annotationPart);
            this.parent.RaiseOnAnnotationMouseDown(this.parent, annotationmousedownEvent);
            button = annotationmousedownEvent.button;
            shift = annotationmousedownEvent.shift;
            xPos = annotationmousedownEvent.xPos;
            yPos = annotationmousedownEvent.yPos;
            annotationIndex = annotationmousedownEvent.annotationIndex;
            annotationPart = annotationmousedownEvent.annotationPart;
        }
        
        public virtual void Zoom() {
            System.EventArgs zoomEvent = new System.EventArgs();
            this.parent.RaiseOnZoom(this.parent, zoomEvent);
        }
        
        public virtual void Pan() {
            System.EventArgs panEvent = new System.EventArgs();
            this.parent.RaiseOnPan(this.parent, panEvent);
        }
        
        public virtual void ReadyStateChange() {
            System.EventArgs readystatechangeEvent = new System.EventArgs();
            this.parent.RaiseOnReadyStateChange(this.parent, readystatechangeEvent);
        }
        
        public virtual void CWBindingDataUpdated(short index, CWUIControlsLib.CWData data, ref bool ignore) {
            _DCWGraphEvents_CWBindingDataUpdatedEvent cwbindingdataupdatedEvent = new _DCWGraphEvents_CWBindingDataUpdatedEvent(index, data, ignore);
            this.parent.RaiseOnCWBindingDataUpdated(this.parent, cwbindingdataupdatedEvent);
            ignore = cwbindingdataupdatedEvent.ignore;
        }
        
        public virtual void CWBindingStatusUpdated(short index, int status, int error, string message) {
            _DCWGraphEvents_CWBindingStatusUpdatedEvent cwbindingstatusupdatedEvent = new _DCWGraphEvents_CWBindingStatusUpdatedEvent(index, status, error, message);
            this.parent.RaiseOnCWBindingStatusUpdated(this.parent, cwbindingstatusupdatedEvent);
        }
        
        public virtual void PlotAreaBoundsChange(ref int left, ref int top, ref int width, ref int height) {
            _DCWGraphEvents_PlotAreaBoundsChangeEvent plotareaboundschangeEvent = new _DCWGraphEvents_PlotAreaBoundsChangeEvent(left, top, width, height);
            this.parent.RaiseOnPlotAreaBoundsChange(this.parent, plotareaboundschangeEvent);
            left = plotareaboundschangeEvent.left;
            top = plotareaboundschangeEvent.top;
            width = plotareaboundschangeEvent.width;
            height = plotareaboundschangeEvent.height;
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{17301da3-c84d-11cf-ae6f-0020af31cef9}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ValueChanged")]
    [System.ComponentModel.DefaultProperty("_Value")]
    public class AxCWNumEdit : System.Windows.Forms.AxHost {
        
        private CWUIControlsLib._DCWNumEdit ocx;
        
        private AxCWNumEditEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxCWNumEdit() : 
                base("17301da3-c84d-11cf-ae6f-0020af31cef9") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("CWUIControlsLib.IFontDisp")]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((CWUIControlsLib.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(0)]
        public virtual object _Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx._Value;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx._Value = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual object Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Value;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Value = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual CWUIControlsLib.CWNumEditModes Mode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Mode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Mode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Mode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Mode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual bool IncDecButtonVisible {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IncDecButtonVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IncDecButtonVisible;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IncDecButtonVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IncDecButtonVisible = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual object IncDecValue {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IncDecValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IncDecValue;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IncDecValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IncDecValue = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual object Minimum {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Minimum", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Minimum;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Minimum", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Minimum = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual object Maximum {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Maximum", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Maximum;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Maximum", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Maximum = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual int AccelTime {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AccelTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AccelTime;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AccelTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AccelTime = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual object AccelInc {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AccelInc", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AccelInc;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AccelInc", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AccelInc = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color BackColorText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.BackColorText)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColorText = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color ForeColorText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.ForeColorText)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ForeColorText = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual CWUIControlsLib.CWPositions IncDecButtonPosition {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IncDecButtonPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IncDecButtonPosition;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IncDecButtonPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IncDecButtonPosition = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual CWUIControlsLib.CWAlignments Alignment {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Alignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Alignment;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Alignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Alignment = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual CWUIControlsLib.CWAppearances Appearance {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Appearance;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Appearance = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual CWUIControlsLib.CWBorderStyles BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool RangeChecking {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RangeChecking", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RangeChecking;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RangeChecking", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RangeChecking = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual string FormatString {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FormatString", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FormatString;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FormatString", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FormatString = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-517)]
        public override string Text {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Text;
                }
                else {
                    return base.Text;
                }
            }
            set {
                base.Text = value;
                if ((this.ocx != null)) {
                    this.ocx.Text = value;
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool Discrete {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Discrete", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Discrete;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Discrete", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Discrete = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual object DiscreteInterval {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DiscreteInterval", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DiscreteInterval;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DiscreteInterval", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DiscreteInterval = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual object DiscreteBase {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DiscreteBase", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DiscreteBase;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DiscreteBase", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DiscreteBase = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual CWUIControlsLib.CWNumEditButtonStyles ButtonStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ButtonStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ButtonStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ButtonStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ButtonStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color ButtonColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ButtonColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.ButtonColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ButtonColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ButtonColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color BackColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
                }
                else {
                    return base.BackColor;
                }
            }
            set {
                base.BackColor = value;
                if ((this.ocx != null)) {
                    this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(277)]
        public virtual CWUIControlsLib.CWBindings CWBindings {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CWBindings", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CWBindings;
            }
        }
        
        public event _DCWNumEditEvents_ValueChangedEventHandler ValueChanged;
        
        public event _DCWNumEditEvents_IncDecButtonClickedEventHandler IncDecButtonClicked;
        
        public event _DCWNumEditEvents_ValueChangingEventHandler ValueChanging;
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DblClick;
        
        public event _DCWNumEditEvents_KeyDownEventHandler KeyDownEvent;
        
        public event _DCWNumEditEvents_KeyPressEventHandler KeyPressEvent;
        
        public event _DCWNumEditEvents_MouseDownEventHandler MouseDownEvent;
        
        public event _DCWNumEditEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event _DCWNumEditEvents_MouseUpEventHandler MouseUpEvent;
        
        public event _DCWNumEditEvents_KeyUpEventHandler KeyUpEvent;
        
        public event _DCWNumEditEvents_ErrorEventHandler Error;
        
        public event _DCWNumEditEvents_CWBindingDataUpdatedEventHandler CWBindingDataUpdated;
        
        public event _DCWNumEditEvents_CWBindingStatusUpdatedEventHandler CWBindingStatusUpdated;
        
        public virtual void SetMinMax(object minimum, object maximum) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMinMax", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetMinMax(minimum, maximum);
        }
        
        public virtual void ImportStyle(string fileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImportStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ImportStyle(fileName);
        }
        
        public virtual void ExportStyle(string fileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExportStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ExportStyle(fileName);
        }
        
        public virtual System.Drawing.Image ControlImage() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.IPictureDisp returnValue = ((CWUIControlsLib.IPictureDisp)(this.ocx.ControlImage()));
            return GetPictureFromIPicture(returnValue);
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual System.Drawing.Image ControlImageEx(int dpiX, int dpiY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlImageEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            CWUIControlsLib.IPictureDisp returnValue = ((CWUIControlsLib.IPictureDisp)(this.ocx.ControlImageEx(dpiX, dpiY)));
            return GetPictureFromIPicture(returnValue);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxCWNumEditEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(CWUIControlsLib._DCWNumEditEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((CWUIControlsLib._DCWNumEdit)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnValueChanged(object sender, _DCWNumEditEvents_ValueChangedEvent e) {
            if ((this.ValueChanged != null)) {
                this.ValueChanged(sender, e);
            }
        }
        
        internal void RaiseOnIncDecButtonClicked(object sender, _DCWNumEditEvents_IncDecButtonClickedEvent e) {
            if ((this.IncDecButtonClicked != null)) {
                this.IncDecButtonClicked(sender, e);
            }
        }
        
        internal void RaiseOnValueChanging(object sender, _DCWNumEditEvents_ValueChangingEvent e) {
            if ((this.ValueChanging != null)) {
                this.ValueChanging(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, _DCWNumEditEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, _DCWNumEditEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, _DCWNumEditEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, _DCWNumEditEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, _DCWNumEditEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, _DCWNumEditEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnError(object sender, _DCWNumEditEvents_ErrorEvent e) {
            if ((this.Error != null)) {
                this.Error(sender, e);
            }
        }
        
        internal void RaiseOnCWBindingDataUpdated(object sender, _DCWNumEditEvents_CWBindingDataUpdatedEvent e) {
            if ((this.CWBindingDataUpdated != null)) {
                this.CWBindingDataUpdated(sender, e);
            }
        }
        
        internal void RaiseOnCWBindingStatusUpdated(object sender, _DCWNumEditEvents_CWBindingStatusUpdatedEvent e) {
            if ((this.CWBindingStatusUpdated != null)) {
                this.CWBindingStatusUpdated(sender, e);
            }
        }
    }
    
    public delegate void _DCWNumEditEvents_ValueChangedEventHandler(object sender, _DCWNumEditEvents_ValueChangedEvent e);
    
    public class _DCWNumEditEvents_ValueChangedEvent {
        
        public object value;
        
        public object previousValue;
        
        public bool outOfRange;
        
        public _DCWNumEditEvents_ValueChangedEvent(object value, object previousValue, bool outOfRange) {
            this.value = value;
            this.previousValue = previousValue;
            this.outOfRange = outOfRange;
        }
    }
    
    public delegate void _DCWNumEditEvents_IncDecButtonClickedEventHandler(object sender, _DCWNumEditEvents_IncDecButtonClickedEvent e);
    
    public class _DCWNumEditEvents_IncDecButtonClickedEvent {
        
        public bool incButton;
        
        public _DCWNumEditEvents_IncDecButtonClickedEvent(bool incButton) {
            this.incButton = incButton;
        }
    }
    
    public delegate void _DCWNumEditEvents_ValueChangingEventHandler(object sender, _DCWNumEditEvents_ValueChangingEvent e);
    
    public class _DCWNumEditEvents_ValueChangingEvent {
        
        public object newValue;
        
        public object attemptedValue;
        
        public object previousValue;
        
        public bool outOfRange;
        
        public _DCWNumEditEvents_ValueChangingEvent(object newValue, object attemptedValue, object previousValue, bool outOfRange) {
            this.newValue = newValue;
            this.attemptedValue = attemptedValue;
            this.previousValue = previousValue;
            this.outOfRange = outOfRange;
        }
    }
    
    public delegate void _DCWNumEditEvents_KeyDownEventHandler(object sender, _DCWNumEditEvents_KeyDownEvent e);
    
    public class _DCWNumEditEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DCWNumEditEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DCWNumEditEvents_KeyPressEventHandler(object sender, _DCWNumEditEvents_KeyPressEvent e);
    
    public class _DCWNumEditEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public _DCWNumEditEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void _DCWNumEditEvents_MouseDownEventHandler(object sender, _DCWNumEditEvents_MouseDownEvent e);
    
    public class _DCWNumEditEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWNumEditEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWNumEditEvents_MouseMoveEventHandler(object sender, _DCWNumEditEvents_MouseMoveEvent e);
    
    public class _DCWNumEditEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWNumEditEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWNumEditEvents_MouseUpEventHandler(object sender, _DCWNumEditEvents_MouseUpEvent e);
    
    public class _DCWNumEditEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DCWNumEditEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DCWNumEditEvents_KeyUpEventHandler(object sender, _DCWNumEditEvents_KeyUpEvent e);
    
    public class _DCWNumEditEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DCWNumEditEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DCWNumEditEvents_ErrorEventHandler(object sender, _DCWNumEditEvents_ErrorEvent e);
    
    public class _DCWNumEditEvents_ErrorEvent {
        
        public short number;
        
        public string description;
        
        public int scode;
        
        public string source;
        
        public string helpFile;
        
        public int helpContext;
        
        public bool cancelDisplay;
        
        public _DCWNumEditEvents_ErrorEvent(short number, string description, int scode, string source, string helpFile, int helpContext, bool cancelDisplay) {
            this.number = number;
            this.description = description;
            this.scode = scode;
            this.source = source;
            this.helpFile = helpFile;
            this.helpContext = helpContext;
            this.cancelDisplay = cancelDisplay;
        }
    }
    
    public delegate void _DCWNumEditEvents_CWBindingDataUpdatedEventHandler(object sender, _DCWNumEditEvents_CWBindingDataUpdatedEvent e);
    
    public class _DCWNumEditEvents_CWBindingDataUpdatedEvent {
        
        public short index;
        
        public CWUIControlsLib.CWData data;
        
        public bool ignore;
        
        public _DCWNumEditEvents_CWBindingDataUpdatedEvent(short index, CWUIControlsLib.CWData data, bool ignore) {
            this.index = index;
            this.data = data;
            this.ignore = ignore;
        }
    }
    
    public delegate void _DCWNumEditEvents_CWBindingStatusUpdatedEventHandler(object sender, _DCWNumEditEvents_CWBindingStatusUpdatedEvent e);
    
    public class _DCWNumEditEvents_CWBindingStatusUpdatedEvent {
        
        public short index;
        
        public int status;
        
        public int error;
        
        public string message;
        
        public _DCWNumEditEvents_CWBindingStatusUpdatedEvent(short index, int status, int error, string message) {
            this.index = index;
            this.status = status;
            this.error = error;
            this.message = message;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxCWNumEditEventMulticaster : CWUIControlsLib._DCWNumEditEvents {
        
        private AxCWNumEdit parent;
        
        public AxCWNumEditEventMulticaster(AxCWNumEdit parent) {
            this.parent = parent;
        }
        
        public virtual void ValueChanged(ref object value, ref object previousValue, bool outOfRange) {
            _DCWNumEditEvents_ValueChangedEvent valuechangedEvent = new _DCWNumEditEvents_ValueChangedEvent(value, previousValue, outOfRange);
            this.parent.RaiseOnValueChanged(this.parent, valuechangedEvent);
            value = valuechangedEvent.value;
            previousValue = valuechangedEvent.previousValue;
        }
        
        public virtual void IncDecButtonClicked(bool incButton) {
            _DCWNumEditEvents_IncDecButtonClickedEvent incdecbuttonclickedEvent = new _DCWNumEditEvents_IncDecButtonClickedEvent(incButton);
            this.parent.RaiseOnIncDecButtonClicked(this.parent, incdecbuttonclickedEvent);
        }
        
        public virtual void ValueChanging(ref object newValue, ref object attemptedValue, ref object previousValue, bool outOfRange) {
            _DCWNumEditEvents_ValueChangingEvent valuechangingEvent = new _DCWNumEditEvents_ValueChangingEvent(newValue, attemptedValue, previousValue, outOfRange);
            this.parent.RaiseOnValueChanging(this.parent, valuechangingEvent);
            newValue = valuechangingEvent.newValue;
            attemptedValue = valuechangingEvent.attemptedValue;
            previousValue = valuechangingEvent.previousValue;
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            _DCWNumEditEvents_KeyDownEvent keydownEvent = new _DCWNumEditEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            _DCWNumEditEvents_KeyPressEvent keypressEvent = new _DCWNumEditEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            _DCWNumEditEvents_MouseDownEvent mousedownEvent = new _DCWNumEditEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            _DCWNumEditEvents_MouseMoveEvent mousemoveEvent = new _DCWNumEditEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            _DCWNumEditEvents_MouseUpEvent mouseupEvent = new _DCWNumEditEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            _DCWNumEditEvents_KeyUpEvent keyupEvent = new _DCWNumEditEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void Error(short number, ref string description, int scode, string source, string helpFile, int helpContext, ref bool cancelDisplay) {
            _DCWNumEditEvents_ErrorEvent errorEvent = new _DCWNumEditEvents_ErrorEvent(number, description, scode, source, helpFile, helpContext, cancelDisplay);
            this.parent.RaiseOnError(this.parent, errorEvent);
            description = errorEvent.description;
            cancelDisplay = errorEvent.cancelDisplay;
        }
        
        public virtual void CWBindingDataUpdated(short index, CWUIControlsLib.CWData data, ref bool ignore) {
            _DCWNumEditEvents_CWBindingDataUpdatedEvent cwbindingdataupdatedEvent = new _DCWNumEditEvents_CWBindingDataUpdatedEvent(index, data, ignore);
            this.parent.RaiseOnCWBindingDataUpdated(this.parent, cwbindingdataupdatedEvent);
            ignore = cwbindingdataupdatedEvent.ignore;
        }
        
        public virtual void CWBindingStatusUpdated(short index, int status, int error, string message) {
            _DCWNumEditEvents_CWBindingStatusUpdatedEvent cwbindingstatusupdatedEvent = new _DCWNumEditEvents_CWBindingStatusUpdatedEvent(index, status, error, message);
            this.parent.RaiseOnCWBindingStatusUpdated(this.parent, cwbindingstatusupdatedEvent);
        }
    }
}
